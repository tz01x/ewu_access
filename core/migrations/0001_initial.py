# Generated by Django 4.0 on 2021-12-09 13:03

import core.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Comments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(max_length=1000)),
                ('created', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('replay', models.ManyToManyField(to='core.Comments')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='auth.user')),
            ],
            options={
                'verbose_name': 'Comment',
            },
        ),
        migrations.CreateModel(
            name='Community',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=500, verbose_name='Title')),
                ('slug', models.SlugField(blank=True, help_text="Don't need to fill this, because this field will be automaticaly ganarate", max_length=11000, null=True, unique=True)),
                ('shortDescription', models.CharField(max_length=1000, verbose_name='Short Description')),
                ('picture', models.ImageField(blank=True, null=True, upload_to=core.models.ImageUploderPath.uploadTo, verbose_name='Picture')),
                ('cover', models.ImageField(blank=True, null=True, upload_to=core.models.ImageUploderPath.uploadTo, verbose_name='Picture')),
                ('is_delete', models.BooleanField(default=False)),
                ('is_public', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='communitys', to='auth.user')),
            ],
        ),
        migrations.CreateModel(
            name='Images',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('picture', models.ImageField(blank=True, null=True, upload_to=core.models.ImageUploderPath.uploadTo)),
            ],
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now=True)),
                ('voteType', models.CharField(choices=[('up', 'up'), ('down', 'down')], max_length=4)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=500, verbose_name='Title')),
                ('slug', models.SlugField(blank=True, help_text="Don't need to fill this, because this field will be automaticaly ganarate", max_length=11000, null=True, unique=True)),
                ('is_delete', models.BooleanField(default=False)),
                ('is_public', models.BooleanField(default=True)),
                ('comments', models.ManyToManyField(to='core.Comments')),
                ('community', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.community')),
                ('pictures', models.ManyToManyField(to='core.Images')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='posts', to='auth.user')),
                ('votes', models.ManyToManyField(to='core.Vote')),
            ],
        ),
        migrations.AddField(
            model_name='comments',
            name='votes',
            field=models.ManyToManyField(to='core.Vote'),
        ),
    ]
